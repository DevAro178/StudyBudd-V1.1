{"ast":null,"code":"var _jsxFileName = \"E:\\\\Django\\\\StudyBud FullStack\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from \"react\";\nimport jwtDecode from \"jwt-decode\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setUserId } from \"../redux/userData\"; // Import the action\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nexport const AuthProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const dispatch = useDispatch();\n  let [user, setUser] = useState(() => localStorage.getItem(\"authTokens\") ? jwtDecode(localStorage.getItem(\"authTokens\")) : null);\n  let [authTokens, setAuthTokens] = useState(() => localStorage.getItem(\"authTokens\") ? JSON.parse(localStorage.getItem(\"authTokens\")) : null);\n  let [loading, setLoading] = useState(true);\n  let [userId, setUserId] = useState(null);\n  let [userName, setUserName] = useState(null);\n  let [userEmail, setUserEmail] = useState(null);\n  let [isLoggedIn, setIsLoggedIn] = useState(false);\n  const navigate = useNavigate();\n  let loginUser = async (email, password) => {\n    // e.preventDefault();\n    // console.log(e, a);\n    const response = await fetch(\"http://127.0.0.1:8000/token/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n    let data = await response.json();\n    if (data) {\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n      setAuthTokens(data);\n      setUser(jwtDecode(data.access));\n      dispatch(setUserId(data.user_id));\n      setUserEmail(data.email);\n      setUserName(data.username);\n      setIsLoggedIn(true);\n      navigate(\"/\");\n    } else {\n      alert(\"Something went wrong while logging in the user!\");\n    }\n  };\n  let logoutUser = () => {\n    // e.preventDefault()\n    localStorage.removeItem(\"authTokens\");\n    setAuthTokens(null);\n    setUser(null);\n    dispatch(setUserId(null));\n    setUserEmail(null);\n    setUserName(null);\n    setIsLoggedIn(false);\n    // navigate(\"/login\");\n  };\n\n  const updateToken = async () => {\n    const response = await fetch(\"http://127.0.0.1:8000/token/refresh/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        refresh: authTokens === null || authTokens === void 0 ? void 0 : authTokens.refresh\n      })\n    });\n    const data = await response.json();\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwtDecode(data.access));\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n    } else {\n      logoutUser();\n    }\n    if (loading) {\n      setLoading(false);\n    }\n  };\n  let contextData = {\n    user: user,\n    authTokens: authTokens,\n    loginUser: loginUser,\n    logoutUser: logoutUser,\n    userId: userId,\n    userName: userName,\n    userEmail: userEmail,\n    isLoggedIn: isLoggedIn\n  };\n  useEffect(() => {\n    if (loading) {\n      updateToken();\n    }\n    const REFRESH_INTERVAL = 1000 * 60 * 24; // 4 minutes\n    let interval = setInterval(() => {\n      if (authTokens) {\n        updateToken();\n      }\n    }, REFRESH_INTERVAL);\n    return () => clearInterval(interval);\n  }, [authTokens, loading]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"v7/afuWSV2VoepzcaEGUaoK+QJc=\", false, function () {\n  return [useDispatch, useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","jwtDecode","useNavigate","useDispatch","useSelector","setUserId","AuthContext","AuthProvider","children","dispatch","user","setUser","localStorage","getItem","authTokens","setAuthTokens","JSON","parse","loading","setLoading","userId","userName","setUserName","userEmail","setUserEmail","isLoggedIn","setIsLoggedIn","navigate","loginUser","email","password","response","fetch","method","headers","body","stringify","data","json","setItem","access","user_id","username","alert","logoutUser","removeItem","updateToken","refresh","status","contextData","REFRESH_INTERVAL","interval","setInterval","clearInterval"],"sources":["E:/Django/StudyBud FullStack/frontend/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useState, useEffect } from \"react\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setUserId } from \"../redux/userData\"; // Import the action\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport default AuthContext;\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const dispatch = useDispatch();\r\n  let [user, setUser] = useState(() =>\r\n    localStorage.getItem(\"authTokens\")\r\n      ? jwtDecode(localStorage.getItem(\"authTokens\"))\r\n      : null\r\n  );\r\n  let [authTokens, setAuthTokens] = useState(() =>\r\n    localStorage.getItem(\"authTokens\")\r\n      ? JSON.parse(localStorage.getItem(\"authTokens\"))\r\n      : null\r\n  );\r\n  let [loading, setLoading] = useState(true);\r\n  let [userId, setUserId] = useState(null);\r\n  let [userName, setUserName] = useState(null);\r\n  let [userEmail, setUserEmail] = useState(null);\r\n  let [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  let loginUser = async (email, password) => {\r\n    // e.preventDefault();\r\n    // console.log(e, a);\r\n    const response = await fetch(\"http://127.0.0.1:8000/token/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        email: email,\r\n        password: password,\r\n      }),\r\n    });\r\n\r\n    let data = await response.json();\r\n\r\n    if (data) {\r\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n      setAuthTokens(data);\r\n      setUser(jwtDecode(data.access));\r\n      dispatch(setUserId(data.user_id));\r\n      setUserEmail(data.email);\r\n      setUserName(data.username);\r\n      setIsLoggedIn(true);\r\n      navigate(\"/\");\r\n    } else {\r\n      alert(\"Something went wrong while logging in the user!\");\r\n    }\r\n  };\r\n\r\n  let logoutUser = () => {\r\n    // e.preventDefault()\r\n    localStorage.removeItem(\"authTokens\");\r\n    setAuthTokens(null);\r\n    setUser(null);\r\n    dispatch(setUserId(null));\r\n    setUserEmail(null);\r\n    setUserName(null);\r\n    setIsLoggedIn(false);\r\n    // navigate(\"/login\");\r\n  };\r\n\r\n  const updateToken = async () => {\r\n    const response = await fetch(\"http://127.0.0.1:8000/token/refresh/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ refresh: authTokens?.refresh }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (response.status === 200) {\r\n      setAuthTokens(data);\r\n      setUser(jwtDecode(data.access));\r\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n    } else {\r\n      logoutUser();\r\n    }\r\n\r\n    if (loading) {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  let contextData = {\r\n    user: user,\r\n    authTokens: authTokens,\r\n    loginUser: loginUser,\r\n    logoutUser: logoutUser,\r\n    userId: userId,\r\n    userName: userName,\r\n    userEmail: userEmail,\r\n    isLoggedIn: isLoggedIn,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (loading) {\r\n      updateToken();\r\n    }\r\n\r\n    const REFRESH_INTERVAL = 1000 * 60 * 24; // 4 minutes\r\n    let interval = setInterval(() => {\r\n      if (authTokens) {\r\n        updateToken();\r\n      }\r\n    }, REFRESH_INTERVAL);\r\n    return () => clearInterval(interval);\r\n  }, [authTokens, loading]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}